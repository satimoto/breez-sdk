// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.75.2.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;

import 'dart:ffi' as ffi;

part 'bridge_generated.freezed.dart';

abstract class BreezSdkCore {
  /// Check whether node service is initialized or not
  Future<bool> initialized({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInitializedConstMeta;

  /// Register a new node in the cloud and return credentials to interact with it
  ///
  /// # Arguments
  ///
  /// * `network` - The network type which is one of (Bitcoin, Testnet, Signet, Regtest)
  /// * `seed` - The node private key
  /// * `config` - The sdk configuration
  Future<GreenlightCredentials> registerNode(
      {required Network network,
      required Uint8List seed,
      required Config config,
      GreenlightCredentials? registerCredentials,
      String? inviteCode,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRegisterNodeConstMeta;

  /// Recover an existing node from the cloud and return credentials to interact with it
  ///
  /// # Arguments
  ///
  /// * `network` - The network type which is one of (Bitcoin, Testnet, Signet, Regtest)
  /// * `seed` - The node private key
  /// * `config` - The sdk configuration
  Future<GreenlightCredentials> recoverNode(
      {required Network network, required Uint8List seed, required Config config, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRecoverNodeConstMeta;

  /// init_services initialized the global NodeService, schedule the node to run in the cloud and
  /// run the signer. This must be called in order to start communicate with the node
  ///
  /// # Arguments
  ///
  /// * `config` - The sdk configuration
  /// * `seed` - The node private key
  /// * `creds` - The greenlight credentials
  ///
  Future<void> initServices(
      {required Config config, required Uint8List seed, required GreenlightCredentials creds, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInitServicesConstMeta;

  /// See [BreezServices::start]
  Future<void> startNode({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kStartNodeConstMeta;

  Stream<BreezEvent> breezEventsStream({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kBreezEventsStreamConstMeta;

  Stream<LogEntry> breezLogStream({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kBreezLogStreamConstMeta;

  /// Cleanup node resources and stop the signer.
  Future<void> stopNode({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kStopNodeConstMeta;

  /// See [BreezServices::send_payment]
  Future<Payment> sendPayment({required String bolt11, int? amountSats, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSendPaymentConstMeta;

  /// See [BreezServices::send_spontaneous_payment]
  Future<Payment> sendSpontaneousPayment({required String nodeId, required int amountSats, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSendSpontaneousPaymentConstMeta;

  /// See [BreezServices::receive_payment]
  Future<LNInvoice> receivePayment({required int amountSats, required String description, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kReceivePaymentConstMeta;

  /// See [BreezServices::node_info]
  Future<NodeState?> nodeInfo({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kNodeInfoConstMeta;

  /// See [BreezServices::list_payments]
  Future<List<Payment>> listPayments(
      {required PaymentTypeFilter filter, int? fromTimestamp, int? toTimestamp, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kListPaymentsConstMeta;

  /// See [BreezServices::list_lsps]
  Future<List<LspInformation>> listLsps({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kListLspsConstMeta;

  /// See [BreezServices::connect_lsp]
  Future<void> connectLsp({required String lspId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kConnectLspConstMeta;

  /// See [BreezServices::fetch_lsp_info]
  Future<LspInformation?> fetchLspInfo({required String id, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFetchLspInfoConstMeta;

  /// See [BreezServices::lsp_id]
  Future<String?> lspId({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kLspIdConstMeta;

  /// See [BreezServices::fetch_fiat_rates]
  Future<List<Rate>> fetchFiatRates({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFetchFiatRatesConstMeta;

  /// See [BreezServices::list_fiat_currencies]
  Future<List<FiatCurrency>> listFiatCurrencies({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kListFiatCurrenciesConstMeta;

  /// See [BreezServices::close_lsp_channels]
  Future<void> closeLspChannels({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCloseLspChannelsConstMeta;

  /// See [BreezServices::sweep]
  Future<void> sweep({required String toAddress, required int feeRateSatsPerVbyte, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSweepConstMeta;

  /// See [BreezServices::receive_onchain]
  Future<SwapInfo> receiveOnchain({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kReceiveOnchainConstMeta;

  /// See [BreezServices::in_progress_swap]
  Future<SwapInfo?> inProgressSwap({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInProgressSwapConstMeta;

  /// See [BreezServices::list_refundables]
  Future<List<SwapInfo>> listRefundables({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kListRefundablesConstMeta;

  /// See [BreezServices::refund]
  Future<String> refund(
      {required String swapAddress, required String toAddress, required int satPerVbyte, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRefundConstMeta;

  /// See [BreezServices::fetch_reverse_swap_fees]
  Future<ReverseSwapPairInfo> fetchReverseSwapFees({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kFetchReverseSwapFeesConstMeta;

  /// See [BreezServices::in_progress_reverse_swaps]
  Future<List<ReverseSwapInfo>> inProgressReverseSwaps({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInProgressReverseSwapsConstMeta;

  /// See [BreezServices::send_onchain]
  Future<ReverseSwapInfo> sendOnchain(
      {required int amountSat,
      required String onchainRecipientAddress,
      required String pairHash,
      required int satPerVbyte,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSendOnchainConstMeta;

  /// See [BreezServices::execute_dev_command]
  Future<String> executeCommand({required String command, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kExecuteCommandConstMeta;

  Future<void> syncNode({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSyncNodeConstMeta;

  Future<LNInvoice> parseInvoice({required String invoice, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kParseInvoiceConstMeta;

  Future<InputType> parse({required String s, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kParseConstMeta;

  /// See [BreezServices::lnurl_pay]
  Future<LnUrlPayResult> lnurlPay(
      {required int userAmountSat, String? comment, required LnUrlPayRequestData reqData, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kLnurlPayConstMeta;

  /// See [BreezServices::lnurl_withdraw]
  Future<LnUrlCallbackStatus> lnurlWithdraw(
      {required LnUrlWithdrawRequestData reqData,
      required int amountSats,
      String? description,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kLnurlWithdrawConstMeta;

  /// See [BreezServices::lnurl_auth]
  Future<LnUrlCallbackStatus> lnurlAuth({required LnUrlAuthRequestData reqData, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kLnurlAuthConstMeta;

  /// See [breez_services::mnemonic_to_seed]
  Future<Uint8List> mnemonicToSeed({required String phrase, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kMnemonicToSeedConstMeta;

  /// See [BreezServices::recommended_fees]
  Future<RecommendedFees> recommendedFees({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRecommendedFeesConstMeta;

  /// See [BreezServices::default_config]
  Future<Config> defaultConfig({required EnvironmentType configType, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDefaultConfigConstMeta;

  /// See [BreezServices::buy_bitcoin]
  Future<String> buyBitcoin({required BuyBitcoinProvider provider, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kBuyBitcoinConstMeta;
}

/// Wrapper for the decrypted [AesSuccessActionData] payload
class AesSuccessActionDataDecrypted {
  /// Contents description, up to 144 characters
  final String description;

  /// Decrypted content
  final String plaintext;

  const AesSuccessActionDataDecrypted({
    required this.description,
    required this.plaintext,
  });
}

class BackupFailedData {
  final String error;

  const BackupFailedData({
    required this.error,
  });
}

/// Wrapped in a [BitcoinAddress], this is the result of [parse] when given a plain or BIP-21 BTC address.
class BitcoinAddressData {
  final String address;
  final Network network;
  final int? amountSat;
  final String? label;
  final String? message;

  const BitcoinAddressData({
    required this.address,
    required this.network,
    this.amountSat,
    this.label,
    this.message,
  });
}

@freezed
class BreezEvent with _$BreezEvent {
  /// Indicates that a new block has just been found
  const factory BreezEvent.newBlock({
    required int block,
  }) = BreezEvent_NewBlock;

  /// Indicates that a new invoice has just been paid
  const factory BreezEvent.invoicePaid({
    required InvoicePaidDetails details,
  }) = BreezEvent_InvoicePaid;

  /// Indicates that the local SDK state has just been sync-ed with the remote components
  const factory BreezEvent.synced() = BreezEvent_Synced;

  /// Indicates that an outgoing payment has been completed successfully
  const factory BreezEvent.paymentSucceed({
    required Payment details,
  }) = BreezEvent_PaymentSucceed;

  /// Indicates that an outgoing payment has been failed to complete
  const factory BreezEvent.paymentFailed({
    required PaymentFailedData details,
  }) = BreezEvent_PaymentFailed;

  /// Indicates that the backup process has just started
  const factory BreezEvent.backupStarted() = BreezEvent_BackupStarted;

  /// Indicates that the backup process has just finished successfully
  const factory BreezEvent.backupSucceeded() = BreezEvent_BackupSucceeded;

  /// Indicates that the backup process has just failed
  const factory BreezEvent.backupFailed({
    required BackupFailedData details,
  }) = BreezEvent_BackupFailed;
}

/// Different providers will demand different behaviours when the user is trying to buy bitcoin.
enum BuyBitcoinProvider {
  Moonpay,
}

/// State of a Lightning channel
enum ChannelState {
  PendingOpen,
  Opened,
  PendingClose,
  Closed,
}

/// Represents the funds that were on the user side of the channel at the time it was closed.
class ClosedChannelPaymentDetails {
  final String shortChannelId;
  final ChannelState state;
  final String fundingTxid;

  const ClosedChannelPaymentDetails({
    required this.shortChannelId,
    required this.state,
    required this.fundingTxid,
  });
}

/// Configuration for the Breez Services
///
/// Use [Config::production] or [Config::staging] for default configs of the different supported
/// environments.
class Config {
  final String breezserver;
  final String mempoolspaceUrl;
  final String workingDir;
  final Network network;
  final int paymentTimeoutSec;
  final String? defaultLspId;
  final String? apiKey;
  final double maxfeePercent;

  const Config({
    required this.breezserver,
    required this.mempoolspaceUrl,
    required this.workingDir,
    required this.network,
    required this.paymentTimeoutSec,
    this.defaultLspId,
    this.apiKey,
    required this.maxfeePercent,
  });
}

/// Details about a supported currency in the fiat rate feed
class CurrencyInfo {
  final String name;
  final int fractionSize;
  final int? spacing;
  final Symbol? symbol;
  final Symbol? uniqSymbol;
  final List<LocalizedName>? localizedName;
  final List<LocaleOverrides>? localeOverrides;

  const CurrencyInfo({
    required this.name,
    required this.fractionSize,
    this.spacing,
    this.symbol,
    this.uniqSymbol,
    this.localizedName,
    this.localeOverrides,
  });
}

/// Indicates the different kinds of supported environments for [crate::BreezServices].
enum EnvironmentType {
  Production,
  Staging,
}

/// Wrapper around the [CurrencyInfo] of a fiat currency
class FiatCurrency {
  final String id;
  final CurrencyInfo info;

  const FiatCurrency({
    required this.id,
    required this.info,
  });
}

/// Client-specific credentials to connect to and manage a Greenlight node in the cloud
class GreenlightCredentials {
  final Uint8List deviceKey;
  final Uint8List deviceCert;

  const GreenlightCredentials({
    required this.deviceKey,
    required this.deviceCert,
  });
}

@freezed
class InputType with _$InputType {
  /// # Supported standards
  ///
  /// - plain on-chain BTC address
  /// - BIP21
  const factory InputType.bitcoinAddress({
    required BitcoinAddressData address,
  }) = InputType_BitcoinAddress;

  /// Also covers URIs like `bitcoin:...&lightning=bolt11`. In this case, it returns the BOLT11
  /// and discards all other data.
  const factory InputType.bolt11({
    required LNInvoice invoice,
  }) = InputType_Bolt11;
  const factory InputType.nodeId({
    required String nodeId,
  }) = InputType_NodeId;
  const factory InputType.url({
    required String url,
  }) = InputType_Url;

  /// # Supported standards
  ///
  /// - LUD-01 LNURL bech32 encoding
  /// - LUD-06 `payRequest` spec
  /// - LUD-16 LN Address
  /// - LUD-17 Support for lnurlp prefix with non-bech32-encoded LNURL URLs
  const factory InputType.lnUrlPay({
    required LnUrlPayRequestData data,
  }) = InputType_LnUrlPay;

  /// # Supported standards
  ///
  /// - LUD-01 LNURL bech32 encoding
  /// - LUD-03 `withdrawRequest` spec
  /// - LUD-17 Support for lnurlw prefix with non-bech32-encoded LNURL URLs
  ///
  /// # Not supported (yet)
  ///
  /// - LUD-14 `balanceCheck`: reusable `withdrawRequest`s
  /// - LUD-19 Pay link discoverable from withdraw link
  const factory InputType.lnUrlWithdraw({
    required LnUrlWithdrawRequestData data,
  }) = InputType_LnUrlWithdraw;

  /// # Supported standards
  ///
  /// - LUD-01 LNURL bech32 encoding
  /// - LUD-04 `auth` base spec
  /// - LUD-17 Support for keyauth prefix with non-bech32-encoded LNURL URLs
  const factory InputType.lnUrlAuth({
    required LnUrlAuthRequestData data,
  }) = InputType_LnUrlAuth;
  const factory InputType.lnUrlError({
    required LnUrlErrorData data,
  }) = InputType_LnUrlError;
}

/// Details of an invoice that has been paid, included as payload in an emitted [BreezEvent]
class InvoicePaidDetails {
  final String paymentHash;
  final String bolt11;

  const InvoicePaidDetails({
    required this.paymentHash,
    required this.bolt11,
  });
}

/// Wrapper for a BOLT11 LN invoice
class LNInvoice {
  final String bolt11;
  final String payeePubkey;
  final String paymentHash;
  final String? description;
  final String? descriptionHash;
  final int? amountMsat;
  final int timestamp;
  final int expiry;
  final List<RouteHint> routingHints;
  final Uint8List paymentSecret;

  const LNInvoice({
    required this.bolt11,
    required this.payeePubkey,
    required this.paymentHash,
    this.description,
    this.descriptionHash,
    this.amountMsat,
    required this.timestamp,
    required this.expiry,
    required this.routingHints,
    required this.paymentSecret,
  });
}

/// Details of a LN payment, as included in a [Payment]
class LnPaymentDetails {
  final String paymentHash;
  final String label;
  final String destinationPubkey;
  final String paymentPreimage;
  final bool keysend;
  final String bolt11;

  /// Only set for [PaymentType::Sent] payments that are part of a LNURL-pay workflow where
  /// the endpoint returns a success action
  final SuccessActionProcessed? lnurlSuccessAction;

  /// Only set for [PaymentType::Sent] payments that are sent to a Lightning Address
  final String? lnAddress;

  /// Only set for [PaymentType::Sent] payments where the receiver endpoint returned LNURL metadata
  final String? lnurlMetadata;

  const LnPaymentDetails({
    required this.paymentHash,
    required this.label,
    required this.destinationPubkey,
    required this.paymentPreimage,
    required this.keysend,
    required this.bolt11,
    this.lnurlSuccessAction,
    this.lnAddress,
    this.lnurlMetadata,
  });
}

/// Wrapped in a [LnUrlAuth], this is the result of [parse] when given a LNURL-auth endpoint.
///
/// It represents the endpoint's parameters for the LNURL workflow.
///
/// See https://github.com/lnurl/luds/blob/luds/04.md
class LnUrlAuthRequestData {
  /// Hex encoded 32 bytes of challenge
  final String k1;

  /// When available, one of: register, login, link, auth
  final String? action;

  /// Indicates the domain of the LNURL-auth service, to be shown to the user when asking for
  /// auth confirmation, as per LUD-04 spec.
  final String domain;

  /// Indicates the URL of the LNURL-auth service, including the query arguments. This will be
  /// extended with the signed challenge and the linking key, then called in the second step of the workflow.
  final String url;

  const LnUrlAuthRequestData({
    required this.k1,
    this.action,
    required this.domain,
    required this.url,
  });
}

@freezed
class LnUrlCallbackStatus with _$LnUrlCallbackStatus {
  /// On-wire format is: `{"status": "OK"}`
  const factory LnUrlCallbackStatus.ok() = LnUrlCallbackStatus_Ok;

  /// On-wire format is: `{"status": "ERROR", "reason": "error details..."}`
  const factory LnUrlCallbackStatus.errorStatus({
    required LnUrlErrorData data,
  }) = LnUrlCallbackStatus_ErrorStatus;
}

/// Wrapped in a [LnUrlError], this represents a LNURL-endpoint error.
class LnUrlErrorData {
  final String reason;

  const LnUrlErrorData({
    required this.reason,
  });
}

/// Wrapped in a [LnUrlPay], this is the result of [parse] when given a LNURL-pay endpoint.
///
/// It represents the endpoint's parameters for the LNURL workflow.
///
/// See https://github.com/lnurl/luds/blob/luds/06.md
class LnUrlPayRequestData {
  final String callback;

  /// The minimum amount, in millisats, that this LNURL-pay endpoint accepts
  final int minSendable;

  /// The maximum amount, in millisats, that this LNURL-pay endpoint accepts
  final int maxSendable;

  /// As per LUD-06, `metadata` is a raw string (e.g. a json representation of the inner map).
  /// Use `metadata_vec()` to get the parsed items.
  final String metadataStr;

  /// The comment length accepted by this endpoint
  ///
  /// See https://github.com/lnurl/luds/blob/luds/12.md
  final int commentAllowed;

  /// Indicates the domain of the LNURL-pay service, to be shown to the user when asking for
  /// payment input, as per LUD-06 spec.
  ///
  /// Note: this is not the domain of the callback, but the domain of the LNURL-pay endpoint.
  final String domain;

  /// If sending to a LN Address, this will be filled.
  final String? lnAddress;

  const LnUrlPayRequestData({
    required this.callback,
    required this.minSendable,
    required this.maxSendable,
    required this.metadataStr,
    required this.commentAllowed,
    required this.domain,
    this.lnAddress,
  });
}

@freezed
class LnUrlPayResult with _$LnUrlPayResult {
  const factory LnUrlPayResult.endpointSuccess({
    SuccessActionProcessed? data,
  }) = LnUrlPayResult_EndpointSuccess;
  const factory LnUrlPayResult.endpointError({
    required LnUrlErrorData data,
  }) = LnUrlPayResult_EndpointError;
}

/// Wrapped in a [LnUrlWithdraw], this is the result of [parse] when given a LNURL-withdraw endpoint.
///
/// It represents the endpoint's parameters for the LNURL workflow.
///
/// See https://github.com/lnurl/luds/blob/luds/03.md
class LnUrlWithdrawRequestData {
  final String callback;
  final String k1;
  final String defaultDescription;

  /// The minimum amount, in millisats, that this LNURL-withdraw endpoint accepts
  final int minWithdrawable;

  /// The maximum amount, in millisats, that this LNURL-withdraw endpoint accepts
  final int maxWithdrawable;

  const LnUrlWithdrawRequestData({
    required this.callback,
    required this.k1,
    required this.defaultDescription,
    required this.minWithdrawable,
    required this.maxWithdrawable,
  });
}

/// Locale-specific settings for the representation of a currency
class LocaleOverrides {
  final String locale;
  final int? spacing;
  final Symbol symbol;

  const LocaleOverrides({
    required this.locale,
    this.spacing,
    required this.symbol,
  });
}

/// Localized name of a currency
class LocalizedName {
  final String locale;
  final String name;

  const LocalizedName({
    required this.locale,
    required this.name,
  });
}

/// Internal SDK log entry
class LogEntry {
  final String line;
  final String level;

  const LogEntry({
    required this.line,
    required this.level,
  });
}

/// Details of supported LSP
class LspInformation {
  final String id;
  final String name;
  final String widgetUrl;
  final String pubkey;
  final String host;
  final int channelCapacity;
  final int targetConf;
  final int baseFeeMsat;
  final double feeRate;
  final int timeLockDelta;
  final int minHtlcMsat;
  final int channelFeePermyriad;
  final Uint8List lspPubkey;
  final int maxInactiveDuration;
  final int channelMinimumFeeMsat;

  const LspInformation({
    required this.id,
    required this.name,
    required this.widgetUrl,
    required this.pubkey,
    required this.host,
    required this.channelCapacity,
    required this.targetConf,
    required this.baseFeeMsat,
    required this.feeRate,
    required this.timeLockDelta,
    required this.minHtlcMsat,
    required this.channelFeePermyriad,
    required this.lspPubkey,
    required this.maxInactiveDuration,
    required this.channelMinimumFeeMsat,
  });
}

class MessageSuccessActionData {
  final String message;

  const MessageSuccessActionData({
    required this.message,
  });
}

/// The different supported bitcoin networks
enum Network {
  /// Mainnet
  Bitcoin,
  Testnet,
  Signet,
  Regtest,
}

/// The node state of a Greenlight LN node running in the cloud
class NodeState {
  final String id;
  final int blockHeight;
  final int channelsBalanceMsat;
  final int onchainBalanceMsat;
  final List<UnspentTransactionOutput> utxos;
  final int maxPayableMsat;
  final int maxReceivableMsat;
  final int maxSinglePaymentAmountMsat;
  final int maxChanReserveMsats;
  final List<String> connectedPeers;
  final int inboundLiquidityMsats;

  const NodeState({
    required this.id,
    required this.blockHeight,
    required this.channelsBalanceMsat,
    required this.onchainBalanceMsat,
    required this.utxos,
    required this.maxPayableMsat,
    required this.maxReceivableMsat,
    required this.maxSinglePaymentAmountMsat,
    required this.maxChanReserveMsats,
    required this.connectedPeers,
    required this.inboundLiquidityMsats,
  });
}

/// Represents a payment, including its [PaymentType] and [PaymentDetails].
class Payment {
  final String id;
  final PaymentType paymentType;
  final int paymentTime;
  final int amountMsat;
  final int feeMsat;
  final bool pending;
  final String? description;
  final PaymentDetails details;

  const Payment({
    required this.id,
    required this.paymentType,
    required this.paymentTime,
    required this.amountMsat,
    required this.feeMsat,
    required this.pending,
    this.description,
    required this.details,
  });
}

@freezed
class PaymentDetails with _$PaymentDetails {
  const factory PaymentDetails.ln({
    required LnPaymentDetails data,
  }) = PaymentDetails_Ln;
  const factory PaymentDetails.closedChannel({
    required ClosedChannelPaymentDetails data,
  }) = PaymentDetails_ClosedChannel;
}

class PaymentFailedData {
  final String error;
  final String nodeId;
  final LNInvoice? invoice;

  const PaymentFailedData({
    required this.error,
    required this.nodeId,
    this.invoice,
  });
}

/// Different types of supported payments
enum PaymentType {
  Sent,
  Received,
  ClosedChannel,
}

/// Different types of supported filters which can be applied when retrieving the transaction list
enum PaymentTypeFilter {
  Sent,
  Received,
  All,
}

/// Denominator in an exchange rate
class Rate {
  final String coin;
  final double value;

  const Rate({
    required this.coin,
    required this.value,
  });
}

/// Wrapper containing the result of the recommended fees query, in sat/vByte, based on mempool.space data
class RecommendedFees {
  final int fastestFee;
  final int halfHourFee;
  final int hourFee;
  final int economyFee;
  final int minimumFee;

  const RecommendedFees({
    required this.fastestFee,
    required this.halfHourFee,
    required this.hourFee,
    required this.economyFee,
    required this.minimumFee,
  });
}

/// Simplified version of [FullReverseSwapInfo], containing only the user-relevant fields
class ReverseSwapInfo {
  final String id;
  final String claimPubkey;
  final int onchainAmountSat;
  final ReverseSwapStatus status;

  const ReverseSwapInfo({
    required this.id,
    required this.claimPubkey,
    required this.onchainAmountSat,
    required this.status,
  });
}

/// Details about the BTC/BTC reverse swap pair, at this point in time
///
/// Maps the result of https://docs.boltz.exchange/en/latest/api/#getting-pairs for the BTC/BTC pair
class ReverseSwapPairInfo {
  /// Minimum amount of sats a reverse swap is allowed to have on this endpoint
  final int min;

  /// Maximum amount of sats a reverse swap is allowed to have on this endpoint
  final int max;

  /// Hash of the pair info JSON
  final String feesHash;

  /// Percentage fee for the reverse swap service
  final double feesPercentage;

  /// Estimated miner fees in sats for locking up funds
  final int feesLockup;

  /// Estimated miner fees in sats for claiming funds
  final int feesClaim;

  const ReverseSwapPairInfo({
    required this.min,
    required this.max,
    required this.feesHash,
    required this.feesPercentage,
    required this.feesLockup,
    required this.feesClaim,
  });
}

/// The possible statuses of a reverse swap, from the Breez SDK perspective.
///
/// See [BoltzApiReverseSwapStatus] for the reverse swap status from the Breez endpoint point of view.
enum ReverseSwapStatus {
  /// HODL invoice payment is not completed yet
  Initial,

  /// HODL invoice payment was successfully triggered and confirmed by Boltz, but the reverse swap
  /// is not yet complete
  InProgress,

  /// An explicit error occurs (validation error, failure reported by Boltz, expiration, etc) and
  /// the initial invoice funds are returned to the sender (invoice is cancelled or payment failed)
  Cancelled,

  /// Successfully completed (claim tx has been seen in the mempool)
  CompletedSeen,

  /// Successfully completed (claim tx has at least one confirmation)
  CompletedConfirmed,
}

/// A route hint for a LN payment
class RouteHint {
  final List<RouteHintHop> hops;

  const RouteHint({
    required this.hops,
  });
}

/// Details of a specific hop in a larger route hint
class RouteHintHop {
  /// The node_id of the non-target end of the route
  final String srcNodeId;

  /// The short_channel_id of this channel
  final int shortChannelId;

  /// The fees which must be paid to use this channel
  final int feesBaseMsat;
  final int feesProportionalMillionths;

  /// The difference in CLTV values between this node and the next node.
  final int cltvExpiryDelta;

  /// The minimum value, in msat, which must be relayed to the next hop.
  final int? htlcMinimumMsat;

  /// The maximum value in msat available for routing with a single HTLC.
  final int? htlcMaximumMsat;

  const RouteHintHop({
    required this.srcNodeId,
    required this.shortChannelId,
    required this.feesBaseMsat,
    required this.feesProportionalMillionths,
    required this.cltvExpiryDelta,
    this.htlcMinimumMsat,
    this.htlcMaximumMsat,
  });
}

@freezed
class SuccessActionProcessed with _$SuccessActionProcessed {
  /// See [SuccessAction::Aes] for received payload
  ///
  /// See [AesSuccessActionDataDecrypted] for decrypted payload
  const factory SuccessActionProcessed.aes({
    required AesSuccessActionDataDecrypted data,
  }) = SuccessActionProcessed_Aes;

  /// See [SuccessAction::Message]
  const factory SuccessActionProcessed.message({
    required MessageSuccessActionData data,
  }) = SuccessActionProcessed_Message;

  /// See [SuccessAction::Url]
  const factory SuccessActionProcessed.url({
    required UrlSuccessActionData data,
  }) = SuccessActionProcessed_Url;
}

/// Represents the details of an on-going swap.
///
/// Once this SwapInfo is created it will be monitored on-chain and its state is
/// saved to the persistent storage.
///
/// The SwapInfo has a status which changes accordingly, documented in [SwapStatus].
class SwapInfo {
  final String bitcoinAddress;
  final int createdAt;
  final int lockHeight;
  final Uint8List paymentHash;
  final Uint8List preimage;
  final Uint8List privateKey;
  final Uint8List publicKey;
  final Uint8List swapperPublicKey;
  final Uint8List script;
  final String? bolt11;
  final int paidSats;
  final int confirmedSats;
  final int unconfirmedSats;
  final SwapStatus status;
  final List<String> refundTxIds;
  final List<String> unconfirmedTxIds;
  final List<String> confirmedTxIds;
  final int minAllowedDeposit;
  final int maxAllowedDeposit;
  final String? lastRedeemError;

  const SwapInfo({
    required this.bitcoinAddress,
    required this.createdAt,
    required this.lockHeight,
    required this.paymentHash,
    required this.preimage,
    required this.privateKey,
    required this.publicKey,
    required this.swapperPublicKey,
    required this.script,
    this.bolt11,
    required this.paidSats,
    required this.confirmedSats,
    required this.unconfirmedSats,
    required this.status,
    required this.refundTxIds,
    required this.unconfirmedTxIds,
    required this.confirmedTxIds,
    required this.minAllowedDeposit,
    required this.maxAllowedDeposit,
    this.lastRedeemError,
  });
}

/// The status of a swap
enum SwapStatus {
  /// The swap address has been created and either there aren't any confirmed transactions associated with it
  /// or there are confirmed transactions that are bellow the lock timeout which means the funds are still
  /// eligible to be redeemed normally.
  Initial,

  /// The swap address has confirmed transactions associated with it and the lock timeout has passed since
  /// the earliest confirmed transaction. This means the only way to spend the funds from this address is by
  /// broadcasting a refund transaction.
  Expired,
}

/// Settings for the symbol representation of a currency
class Symbol {
  final String? grapheme;
  final String? template;
  final bool? rtl;
  final int? position;

  const Symbol({
    this.grapheme,
    this.template,
    this.rtl,
    this.position,
  });
}

/// UTXO known to the LN node
class UnspentTransactionOutput {
  final Uint8List txid;
  final int outnum;
  final int amountMillisatoshi;
  final String address;
  final bool reserved;
  final int reservedToBlock;

  const UnspentTransactionOutput({
    required this.txid,
    required this.outnum,
    required this.amountMillisatoshi,
    required this.address,
    required this.reserved,
    required this.reservedToBlock,
  });
}

class UrlSuccessActionData {
  final String description;
  final String url;

  const UrlSuccessActionData({
    required this.description,
    required this.url,
  });
}

class BreezSdkCoreImpl implements BreezSdkCore {
  final BreezSdkCorePlatform _platform;
  factory BreezSdkCoreImpl(ExternalLibrary dylib) => BreezSdkCoreImpl.raw(BreezSdkCorePlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory BreezSdkCoreImpl.wasm(FutureOr<WasmModule> module) => BreezSdkCoreImpl(module as ExternalLibrary);
  BreezSdkCoreImpl.raw(this._platform);
  Future<bool> initialized({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_initialized(port_),
      parseSuccessData: _wire2api_bool,
      constMeta: kInitializedConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kInitializedConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "initialized",
        argNames: [],
      );

  Future<GreenlightCredentials> registerNode(
      {required Network network,
      required Uint8List seed,
      required Config config,
      GreenlightCredentials? registerCredentials,
      String? inviteCode,
      dynamic hint}) {
    var arg0 = api2wire_network(network);
    var arg1 = _platform.api2wire_uint_8_list(seed);
    var arg2 = _platform.api2wire_box_autoadd_config(config);
    var arg3 = _platform.api2wire_opt_box_autoadd_greenlight_credentials(registerCredentials);
    var arg4 = _platform.api2wire_opt_String(inviteCode);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_register_node(port_, arg0, arg1, arg2, arg3, arg4),
      parseSuccessData: _wire2api_greenlight_credentials,
      constMeta: kRegisterNodeConstMeta,
      argValues: [network, seed, config, registerCredentials, inviteCode],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRegisterNodeConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "register_node",
        argNames: ["network", "seed", "config", "registerCredentials", "inviteCode"],
      );

  Future<GreenlightCredentials> recoverNode(
      {required Network network, required Uint8List seed, required Config config, dynamic hint}) {
    var arg0 = api2wire_network(network);
    var arg1 = _platform.api2wire_uint_8_list(seed);
    var arg2 = _platform.api2wire_box_autoadd_config(config);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_recover_node(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_greenlight_credentials,
      constMeta: kRecoverNodeConstMeta,
      argValues: [network, seed, config],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRecoverNodeConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "recover_node",
        argNames: ["network", "seed", "config"],
      );

  Future<void> initServices(
      {required Config config, required Uint8List seed, required GreenlightCredentials creds, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_config(config);
    var arg1 = _platform.api2wire_uint_8_list(seed);
    var arg2 = _platform.api2wire_box_autoadd_greenlight_credentials(creds);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_init_services(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_unit,
      constMeta: kInitServicesConstMeta,
      argValues: [config, seed, creds],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kInitServicesConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "init_services",
        argNames: ["config", "seed", "creds"],
      );

  Future<void> startNode({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_start_node(port_),
      parseSuccessData: _wire2api_unit,
      constMeta: kStartNodeConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kStartNodeConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "start_node",
        argNames: [],
      );

  Stream<BreezEvent> breezEventsStream({dynamic hint}) {
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_breez_events_stream(port_),
      parseSuccessData: _wire2api_breez_event,
      constMeta: kBreezEventsStreamConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kBreezEventsStreamConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "breez_events_stream",
        argNames: [],
      );

  Stream<LogEntry> breezLogStream({dynamic hint}) {
    return _platform.executeStream(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_breez_log_stream(port_),
      parseSuccessData: _wire2api_log_entry,
      constMeta: kBreezLogStreamConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kBreezLogStreamConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "breez_log_stream",
        argNames: [],
      );

  Future<void> stopNode({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_stop_node(port_),
      parseSuccessData: _wire2api_unit,
      constMeta: kStopNodeConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kStopNodeConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "stop_node",
        argNames: [],
      );

  Future<Payment> sendPayment({required String bolt11, int? amountSats, dynamic hint}) {
    var arg0 = _platform.api2wire_String(bolt11);
    var arg1 = _platform.api2wire_opt_box_autoadd_u64(amountSats);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_send_payment(port_, arg0, arg1),
      parseSuccessData: _wire2api_payment,
      constMeta: kSendPaymentConstMeta,
      argValues: [bolt11, amountSats],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSendPaymentConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "send_payment",
        argNames: ["bolt11", "amountSats"],
      );

  Future<Payment> sendSpontaneousPayment({required String nodeId, required int amountSats, dynamic hint}) {
    var arg0 = _platform.api2wire_String(nodeId);
    var arg1 = _platform.api2wire_u64(amountSats);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_send_spontaneous_payment(port_, arg0, arg1),
      parseSuccessData: _wire2api_payment,
      constMeta: kSendSpontaneousPaymentConstMeta,
      argValues: [nodeId, amountSats],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSendSpontaneousPaymentConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "send_spontaneous_payment",
        argNames: ["nodeId", "amountSats"],
      );

  Future<LNInvoice> receivePayment({required int amountSats, required String description, dynamic hint}) {
    var arg0 = _platform.api2wire_u64(amountSats);
    var arg1 = _platform.api2wire_String(description);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_receive_payment(port_, arg0, arg1),
      parseSuccessData: _wire2api_ln_invoice,
      constMeta: kReceivePaymentConstMeta,
      argValues: [amountSats, description],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kReceivePaymentConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "receive_payment",
        argNames: ["amountSats", "description"],
      );

  Future<NodeState?> nodeInfo({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_node_info(port_),
      parseSuccessData: _wire2api_opt_box_autoadd_node_state,
      constMeta: kNodeInfoConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kNodeInfoConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "node_info",
        argNames: [],
      );

  Future<List<Payment>> listPayments(
      {required PaymentTypeFilter filter, int? fromTimestamp, int? toTimestamp, dynamic hint}) {
    var arg0 = api2wire_payment_type_filter(filter);
    var arg1 = _platform.api2wire_opt_box_autoadd_i64(fromTimestamp);
    var arg2 = _platform.api2wire_opt_box_autoadd_i64(toTimestamp);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_list_payments(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_list_payment,
      constMeta: kListPaymentsConstMeta,
      argValues: [filter, fromTimestamp, toTimestamp],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kListPaymentsConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "list_payments",
        argNames: ["filter", "fromTimestamp", "toTimestamp"],
      );

  Future<List<LspInformation>> listLsps({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_list_lsps(port_),
      parseSuccessData: _wire2api_list_lsp_information,
      constMeta: kListLspsConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kListLspsConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "list_lsps",
        argNames: [],
      );

  Future<void> connectLsp({required String lspId, dynamic hint}) {
    var arg0 = _platform.api2wire_String(lspId);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_connect_lsp(port_, arg0),
      parseSuccessData: _wire2api_unit,
      constMeta: kConnectLspConstMeta,
      argValues: [lspId],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kConnectLspConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "connect_lsp",
        argNames: ["lspId"],
      );

  Future<LspInformation?> fetchLspInfo({required String id, dynamic hint}) {
    var arg0 = _platform.api2wire_String(id);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_fetch_lsp_info(port_, arg0),
      parseSuccessData: _wire2api_opt_box_autoadd_lsp_information,
      constMeta: kFetchLspInfoConstMeta,
      argValues: [id],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kFetchLspInfoConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "fetch_lsp_info",
        argNames: ["id"],
      );

  Future<String?> lspId({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_lsp_id(port_),
      parseSuccessData: _wire2api_opt_String,
      constMeta: kLspIdConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kLspIdConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "lsp_id",
        argNames: [],
      );

  Future<List<Rate>> fetchFiatRates({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_fetch_fiat_rates(port_),
      parseSuccessData: _wire2api_list_rate,
      constMeta: kFetchFiatRatesConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kFetchFiatRatesConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "fetch_fiat_rates",
        argNames: [],
      );

  Future<List<FiatCurrency>> listFiatCurrencies({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_list_fiat_currencies(port_),
      parseSuccessData: _wire2api_list_fiat_currency,
      constMeta: kListFiatCurrenciesConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kListFiatCurrenciesConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "list_fiat_currencies",
        argNames: [],
      );

  Future<void> closeLspChannels({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_close_lsp_channels(port_),
      parseSuccessData: _wire2api_unit,
      constMeta: kCloseLspChannelsConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCloseLspChannelsConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "close_lsp_channels",
        argNames: [],
      );

  Future<void> sweep({required String toAddress, required int feeRateSatsPerVbyte, dynamic hint}) {
    var arg0 = _platform.api2wire_String(toAddress);
    var arg1 = _platform.api2wire_u64(feeRateSatsPerVbyte);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_sweep(port_, arg0, arg1),
      parseSuccessData: _wire2api_unit,
      constMeta: kSweepConstMeta,
      argValues: [toAddress, feeRateSatsPerVbyte],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSweepConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "sweep",
        argNames: ["toAddress", "feeRateSatsPerVbyte"],
      );

  Future<SwapInfo> receiveOnchain({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_receive_onchain(port_),
      parseSuccessData: _wire2api_swap_info,
      constMeta: kReceiveOnchainConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kReceiveOnchainConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "receive_onchain",
        argNames: [],
      );

  Future<SwapInfo?> inProgressSwap({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_in_progress_swap(port_),
      parseSuccessData: _wire2api_opt_box_autoadd_swap_info,
      constMeta: kInProgressSwapConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kInProgressSwapConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "in_progress_swap",
        argNames: [],
      );

  Future<List<SwapInfo>> listRefundables({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_list_refundables(port_),
      parseSuccessData: _wire2api_list_swap_info,
      constMeta: kListRefundablesConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kListRefundablesConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "list_refundables",
        argNames: [],
      );

  Future<String> refund(
      {required String swapAddress, required String toAddress, required int satPerVbyte, dynamic hint}) {
    var arg0 = _platform.api2wire_String(swapAddress);
    var arg1 = _platform.api2wire_String(toAddress);
    var arg2 = api2wire_u32(satPerVbyte);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_refund(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_String,
      constMeta: kRefundConstMeta,
      argValues: [swapAddress, toAddress, satPerVbyte],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRefundConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "refund",
        argNames: ["swapAddress", "toAddress", "satPerVbyte"],
      );

  Future<ReverseSwapPairInfo> fetchReverseSwapFees({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_fetch_reverse_swap_fees(port_),
      parseSuccessData: _wire2api_reverse_swap_pair_info,
      constMeta: kFetchReverseSwapFeesConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kFetchReverseSwapFeesConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "fetch_reverse_swap_fees",
        argNames: [],
      );

  Future<List<ReverseSwapInfo>> inProgressReverseSwaps({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_in_progress_reverse_swaps(port_),
      parseSuccessData: _wire2api_list_reverse_swap_info,
      constMeta: kInProgressReverseSwapsConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kInProgressReverseSwapsConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "in_progress_reverse_swaps",
        argNames: [],
      );

  Future<ReverseSwapInfo> sendOnchain(
      {required int amountSat,
      required String onchainRecipientAddress,
      required String pairHash,
      required int satPerVbyte,
      dynamic hint}) {
    var arg0 = _platform.api2wire_u64(amountSat);
    var arg1 = _platform.api2wire_String(onchainRecipientAddress);
    var arg2 = _platform.api2wire_String(pairHash);
    var arg3 = _platform.api2wire_u64(satPerVbyte);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_send_onchain(port_, arg0, arg1, arg2, arg3),
      parseSuccessData: _wire2api_reverse_swap_info,
      constMeta: kSendOnchainConstMeta,
      argValues: [amountSat, onchainRecipientAddress, pairHash, satPerVbyte],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSendOnchainConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "send_onchain",
        argNames: ["amountSat", "onchainRecipientAddress", "pairHash", "satPerVbyte"],
      );

  Future<String> executeCommand({required String command, dynamic hint}) {
    var arg0 = _platform.api2wire_String(command);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_execute_command(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kExecuteCommandConstMeta,
      argValues: [command],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kExecuteCommandConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "execute_command",
        argNames: ["command"],
      );

  Future<void> syncNode({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_sync_node(port_),
      parseSuccessData: _wire2api_unit,
      constMeta: kSyncNodeConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kSyncNodeConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "sync_node",
        argNames: [],
      );

  Future<LNInvoice> parseInvoice({required String invoice, dynamic hint}) {
    var arg0 = _platform.api2wire_String(invoice);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_parse_invoice(port_, arg0),
      parseSuccessData: _wire2api_ln_invoice,
      constMeta: kParseInvoiceConstMeta,
      argValues: [invoice],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kParseInvoiceConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "parse_invoice",
        argNames: ["invoice"],
      );

  Future<InputType> parse({required String s, dynamic hint}) {
    var arg0 = _platform.api2wire_String(s);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_parse(port_, arg0),
      parseSuccessData: _wire2api_input_type,
      constMeta: kParseConstMeta,
      argValues: [s],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kParseConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "parse",
        argNames: ["s"],
      );

  Future<LnUrlPayResult> lnurlPay(
      {required int userAmountSat, String? comment, required LnUrlPayRequestData reqData, dynamic hint}) {
    var arg0 = _platform.api2wire_u64(userAmountSat);
    var arg1 = _platform.api2wire_opt_String(comment);
    var arg2 = _platform.api2wire_box_autoadd_ln_url_pay_request_data(reqData);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_lnurl_pay(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_ln_url_pay_result,
      constMeta: kLnurlPayConstMeta,
      argValues: [userAmountSat, comment, reqData],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kLnurlPayConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "lnurl_pay",
        argNames: ["userAmountSat", "comment", "reqData"],
      );

  Future<LnUrlCallbackStatus> lnurlWithdraw(
      {required LnUrlWithdrawRequestData reqData,
      required int amountSats,
      String? description,
      dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_ln_url_withdraw_request_data(reqData);
    var arg1 = _platform.api2wire_u64(amountSats);
    var arg2 = _platform.api2wire_opt_String(description);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_lnurl_withdraw(port_, arg0, arg1, arg2),
      parseSuccessData: _wire2api_ln_url_callback_status,
      constMeta: kLnurlWithdrawConstMeta,
      argValues: [reqData, amountSats, description],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kLnurlWithdrawConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "lnurl_withdraw",
        argNames: ["reqData", "amountSats", "description"],
      );

  Future<LnUrlCallbackStatus> lnurlAuth({required LnUrlAuthRequestData reqData, dynamic hint}) {
    var arg0 = _platform.api2wire_box_autoadd_ln_url_auth_request_data(reqData);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_lnurl_auth(port_, arg0),
      parseSuccessData: _wire2api_ln_url_callback_status,
      constMeta: kLnurlAuthConstMeta,
      argValues: [reqData],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kLnurlAuthConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "lnurl_auth",
        argNames: ["reqData"],
      );

  Future<Uint8List> mnemonicToSeed({required String phrase, dynamic hint}) {
    var arg0 = _platform.api2wire_String(phrase);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_mnemonic_to_seed(port_, arg0),
      parseSuccessData: _wire2api_uint_8_list,
      constMeta: kMnemonicToSeedConstMeta,
      argValues: [phrase],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kMnemonicToSeedConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "mnemonic_to_seed",
        argNames: ["phrase"],
      );

  Future<RecommendedFees> recommendedFees({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_recommended_fees(port_),
      parseSuccessData: _wire2api_recommended_fees,
      constMeta: kRecommendedFeesConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRecommendedFeesConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "recommended_fees",
        argNames: [],
      );

  Future<Config> defaultConfig({required EnvironmentType configType, dynamic hint}) {
    var arg0 = api2wire_environment_type(configType);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_default_config(port_, arg0),
      parseSuccessData: _wire2api_config,
      constMeta: kDefaultConfigConstMeta,
      argValues: [configType],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kDefaultConfigConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "default_config",
        argNames: ["configType"],
      );

  Future<String> buyBitcoin({required BuyBitcoinProvider provider, dynamic hint}) {
    var arg0 = api2wire_buy_bitcoin_provider(provider);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_buy_bitcoin(port_, arg0),
      parseSuccessData: _wire2api_String,
      constMeta: kBuyBitcoinConstMeta,
      argValues: [provider],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kBuyBitcoinConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "buy_bitcoin",
        argNames: ["provider"],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  List<String> _wire2api_StringList(dynamic raw) {
    return (raw as List<dynamic>).cast<String>();
  }

  AesSuccessActionDataDecrypted _wire2api_aes_success_action_data_decrypted(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return AesSuccessActionDataDecrypted(
      description: _wire2api_String(arr[0]),
      plaintext: _wire2api_String(arr[1]),
    );
  }

  BackupFailedData _wire2api_backup_failed_data(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return BackupFailedData(
      error: _wire2api_String(arr[0]),
    );
  }

  BitcoinAddressData _wire2api_bitcoin_address_data(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 5) throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return BitcoinAddressData(
      address: _wire2api_String(arr[0]),
      network: _wire2api_network(arr[1]),
      amountSat: _wire2api_opt_box_autoadd_u64(arr[2]),
      label: _wire2api_opt_String(arr[3]),
      message: _wire2api_opt_String(arr[4]),
    );
  }

  bool _wire2api_bool(dynamic raw) {
    return raw as bool;
  }

  AesSuccessActionDataDecrypted _wire2api_box_autoadd_aes_success_action_data_decrypted(dynamic raw) {
    return _wire2api_aes_success_action_data_decrypted(raw);
  }

  BackupFailedData _wire2api_box_autoadd_backup_failed_data(dynamic raw) {
    return _wire2api_backup_failed_data(raw);
  }

  BitcoinAddressData _wire2api_box_autoadd_bitcoin_address_data(dynamic raw) {
    return _wire2api_bitcoin_address_data(raw);
  }

  bool _wire2api_box_autoadd_bool(dynamic raw) {
    return raw as bool;
  }

  ClosedChannelPaymentDetails _wire2api_box_autoadd_closed_channel_payment_details(dynamic raw) {
    return _wire2api_closed_channel_payment_details(raw);
  }

  InvoicePaidDetails _wire2api_box_autoadd_invoice_paid_details(dynamic raw) {
    return _wire2api_invoice_paid_details(raw);
  }

  LNInvoice _wire2api_box_autoadd_ln_invoice(dynamic raw) {
    return _wire2api_ln_invoice(raw);
  }

  LnPaymentDetails _wire2api_box_autoadd_ln_payment_details(dynamic raw) {
    return _wire2api_ln_payment_details(raw);
  }

  LnUrlAuthRequestData _wire2api_box_autoadd_ln_url_auth_request_data(dynamic raw) {
    return _wire2api_ln_url_auth_request_data(raw);
  }

  LnUrlErrorData _wire2api_box_autoadd_ln_url_error_data(dynamic raw) {
    return _wire2api_ln_url_error_data(raw);
  }

  LnUrlPayRequestData _wire2api_box_autoadd_ln_url_pay_request_data(dynamic raw) {
    return _wire2api_ln_url_pay_request_data(raw);
  }

  LnUrlWithdrawRequestData _wire2api_box_autoadd_ln_url_withdraw_request_data(dynamic raw) {
    return _wire2api_ln_url_withdraw_request_data(raw);
  }

  LspInformation _wire2api_box_autoadd_lsp_information(dynamic raw) {
    return _wire2api_lsp_information(raw);
  }

  MessageSuccessActionData _wire2api_box_autoadd_message_success_action_data(dynamic raw) {
    return _wire2api_message_success_action_data(raw);
  }

  NodeState _wire2api_box_autoadd_node_state(dynamic raw) {
    return _wire2api_node_state(raw);
  }

  Payment _wire2api_box_autoadd_payment(dynamic raw) {
    return _wire2api_payment(raw);
  }

  PaymentFailedData _wire2api_box_autoadd_payment_failed_data(dynamic raw) {
    return _wire2api_payment_failed_data(raw);
  }

  SuccessActionProcessed _wire2api_box_autoadd_success_action_processed(dynamic raw) {
    return _wire2api_success_action_processed(raw);
  }

  SwapInfo _wire2api_box_autoadd_swap_info(dynamic raw) {
    return _wire2api_swap_info(raw);
  }

  Symbol _wire2api_box_autoadd_symbol(dynamic raw) {
    return _wire2api_symbol(raw);
  }

  int _wire2api_box_autoadd_u32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_box_autoadd_u64(dynamic raw) {
    return _wire2api_u64(raw);
  }

  UrlSuccessActionData _wire2api_box_autoadd_url_success_action_data(dynamic raw) {
    return _wire2api_url_success_action_data(raw);
  }

  BreezEvent _wire2api_breez_event(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return BreezEvent_NewBlock(
          block: _wire2api_u32(raw[1]),
        );
      case 1:
        return BreezEvent_InvoicePaid(
          details: _wire2api_box_autoadd_invoice_paid_details(raw[1]),
        );
      case 2:
        return BreezEvent_Synced();
      case 3:
        return BreezEvent_PaymentSucceed(
          details: _wire2api_box_autoadd_payment(raw[1]),
        );
      case 4:
        return BreezEvent_PaymentFailed(
          details: _wire2api_box_autoadd_payment_failed_data(raw[1]),
        );
      case 5:
        return BreezEvent_BackupStarted();
      case 6:
        return BreezEvent_BackupSucceeded();
      case 7:
        return BreezEvent_BackupFailed(
          details: _wire2api_box_autoadd_backup_failed_data(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  ChannelState _wire2api_channel_state(dynamic raw) {
    return ChannelState.values[raw as int];
  }

  ClosedChannelPaymentDetails _wire2api_closed_channel_payment_details(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3) throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return ClosedChannelPaymentDetails(
      shortChannelId: _wire2api_String(arr[0]),
      state: _wire2api_channel_state(arr[1]),
      fundingTxid: _wire2api_String(arr[2]),
    );
  }

  Config _wire2api_config(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 8) throw Exception('unexpected arr length: expect 8 but see ${arr.length}');
    return Config(
      breezserver: _wire2api_String(arr[0]),
      mempoolspaceUrl: _wire2api_String(arr[1]),
      workingDir: _wire2api_String(arr[2]),
      network: _wire2api_network(arr[3]),
      paymentTimeoutSec: _wire2api_u32(arr[4]),
      defaultLspId: _wire2api_opt_String(arr[5]),
      apiKey: _wire2api_opt_String(arr[6]),
      maxfeePercent: _wire2api_f64(arr[7]),
    );
  }

  CurrencyInfo _wire2api_currency_info(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 7) throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return CurrencyInfo(
      name: _wire2api_String(arr[0]),
      fractionSize: _wire2api_u32(arr[1]),
      spacing: _wire2api_opt_box_autoadd_u32(arr[2]),
      symbol: _wire2api_opt_box_autoadd_symbol(arr[3]),
      uniqSymbol: _wire2api_opt_box_autoadd_symbol(arr[4]),
      localizedName: _wire2api_opt_list_localized_name(arr[5]),
      localeOverrides: _wire2api_opt_list_locale_overrides(arr[6]),
    );
  }

  double _wire2api_f64(dynamic raw) {
    return raw as double;
  }

  FiatCurrency _wire2api_fiat_currency(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return FiatCurrency(
      id: _wire2api_String(arr[0]),
      info: _wire2api_currency_info(arr[1]),
    );
  }

  GreenlightCredentials _wire2api_greenlight_credentials(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return GreenlightCredentials(
      deviceKey: _wire2api_uint_8_list(arr[0]),
      deviceCert: _wire2api_uint_8_list(arr[1]),
    );
  }

  int _wire2api_i32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_i64(dynamic raw) {
    return castInt(raw);
  }

  InputType _wire2api_input_type(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return InputType_BitcoinAddress(
          address: _wire2api_box_autoadd_bitcoin_address_data(raw[1]),
        );
      case 1:
        return InputType_Bolt11(
          invoice: _wire2api_box_autoadd_ln_invoice(raw[1]),
        );
      case 2:
        return InputType_NodeId(
          nodeId: _wire2api_String(raw[1]),
        );
      case 3:
        return InputType_Url(
          url: _wire2api_String(raw[1]),
        );
      case 4:
        return InputType_LnUrlPay(
          data: _wire2api_box_autoadd_ln_url_pay_request_data(raw[1]),
        );
      case 5:
        return InputType_LnUrlWithdraw(
          data: _wire2api_box_autoadd_ln_url_withdraw_request_data(raw[1]),
        );
      case 6:
        return InputType_LnUrlAuth(
          data: _wire2api_box_autoadd_ln_url_auth_request_data(raw[1]),
        );
      case 7:
        return InputType_LnUrlError(
          data: _wire2api_box_autoadd_ln_url_error_data(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  InvoicePaidDetails _wire2api_invoice_paid_details(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return InvoicePaidDetails(
      paymentHash: _wire2api_String(arr[0]),
      bolt11: _wire2api_String(arr[1]),
    );
  }

  List<FiatCurrency> _wire2api_list_fiat_currency(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_fiat_currency).toList();
  }

  List<LocaleOverrides> _wire2api_list_locale_overrides(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_locale_overrides).toList();
  }

  List<LocalizedName> _wire2api_list_localized_name(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_localized_name).toList();
  }

  List<LspInformation> _wire2api_list_lsp_information(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_lsp_information).toList();
  }

  List<Payment> _wire2api_list_payment(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_payment).toList();
  }

  List<Rate> _wire2api_list_rate(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_rate).toList();
  }

  List<ReverseSwapInfo> _wire2api_list_reverse_swap_info(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_reverse_swap_info).toList();
  }

  List<RouteHint> _wire2api_list_route_hint(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_route_hint).toList();
  }

  List<RouteHintHop> _wire2api_list_route_hint_hop(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_route_hint_hop).toList();
  }

  List<SwapInfo> _wire2api_list_swap_info(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_swap_info).toList();
  }

  List<UnspentTransactionOutput> _wire2api_list_unspent_transaction_output(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_unspent_transaction_output).toList();
  }

  LNInvoice _wire2api_ln_invoice(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 10) throw Exception('unexpected arr length: expect 10 but see ${arr.length}');
    return LNInvoice(
      bolt11: _wire2api_String(arr[0]),
      payeePubkey: _wire2api_String(arr[1]),
      paymentHash: _wire2api_String(arr[2]),
      description: _wire2api_opt_String(arr[3]),
      descriptionHash: _wire2api_opt_String(arr[4]),
      amountMsat: _wire2api_opt_box_autoadd_u64(arr[5]),
      timestamp: _wire2api_u64(arr[6]),
      expiry: _wire2api_u64(arr[7]),
      routingHints: _wire2api_list_route_hint(arr[8]),
      paymentSecret: _wire2api_uint_8_list(arr[9]),
    );
  }

  LnPaymentDetails _wire2api_ln_payment_details(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 9) throw Exception('unexpected arr length: expect 9 but see ${arr.length}');
    return LnPaymentDetails(
      paymentHash: _wire2api_String(arr[0]),
      label: _wire2api_String(arr[1]),
      destinationPubkey: _wire2api_String(arr[2]),
      paymentPreimage: _wire2api_String(arr[3]),
      keysend: _wire2api_bool(arr[4]),
      bolt11: _wire2api_String(arr[5]),
      lnurlSuccessAction: _wire2api_opt_box_autoadd_success_action_processed(arr[6]),
      lnAddress: _wire2api_opt_String(arr[7]),
      lnurlMetadata: _wire2api_opt_String(arr[8]),
    );
  }

  LnUrlAuthRequestData _wire2api_ln_url_auth_request_data(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4) throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return LnUrlAuthRequestData(
      k1: _wire2api_String(arr[0]),
      action: _wire2api_opt_String(arr[1]),
      domain: _wire2api_String(arr[2]),
      url: _wire2api_String(arr[3]),
    );
  }

  LnUrlCallbackStatus _wire2api_ln_url_callback_status(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return LnUrlCallbackStatus_Ok();
      case 1:
        return LnUrlCallbackStatus_ErrorStatus(
          data: _wire2api_box_autoadd_ln_url_error_data(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  LnUrlErrorData _wire2api_ln_url_error_data(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return LnUrlErrorData(
      reason: _wire2api_String(arr[0]),
    );
  }

  LnUrlPayRequestData _wire2api_ln_url_pay_request_data(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 7) throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return LnUrlPayRequestData(
      callback: _wire2api_String(arr[0]),
      minSendable: _wire2api_u64(arr[1]),
      maxSendable: _wire2api_u64(arr[2]),
      metadataStr: _wire2api_String(arr[3]),
      commentAllowed: _wire2api_u16(arr[4]),
      domain: _wire2api_String(arr[5]),
      lnAddress: _wire2api_opt_String(arr[6]),
    );
  }

  LnUrlPayResult _wire2api_ln_url_pay_result(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return LnUrlPayResult_EndpointSuccess(
          data: _wire2api_opt_box_autoadd_success_action_processed(raw[1]),
        );
      case 1:
        return LnUrlPayResult_EndpointError(
          data: _wire2api_box_autoadd_ln_url_error_data(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  LnUrlWithdrawRequestData _wire2api_ln_url_withdraw_request_data(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 5) throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return LnUrlWithdrawRequestData(
      callback: _wire2api_String(arr[0]),
      k1: _wire2api_String(arr[1]),
      defaultDescription: _wire2api_String(arr[2]),
      minWithdrawable: _wire2api_u64(arr[3]),
      maxWithdrawable: _wire2api_u64(arr[4]),
    );
  }

  LocaleOverrides _wire2api_locale_overrides(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3) throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return LocaleOverrides(
      locale: _wire2api_String(arr[0]),
      spacing: _wire2api_opt_box_autoadd_u32(arr[1]),
      symbol: _wire2api_symbol(arr[2]),
    );
  }

  LocalizedName _wire2api_localized_name(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return LocalizedName(
      locale: _wire2api_String(arr[0]),
      name: _wire2api_String(arr[1]),
    );
  }

  LogEntry _wire2api_log_entry(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return LogEntry(
      line: _wire2api_String(arr[0]),
      level: _wire2api_String(arr[1]),
    );
  }

  LspInformation _wire2api_lsp_information(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 15) throw Exception('unexpected arr length: expect 15 but see ${arr.length}');
    return LspInformation(
      id: _wire2api_String(arr[0]),
      name: _wire2api_String(arr[1]),
      widgetUrl: _wire2api_String(arr[2]),
      pubkey: _wire2api_String(arr[3]),
      host: _wire2api_String(arr[4]),
      channelCapacity: _wire2api_i64(arr[5]),
      targetConf: _wire2api_i32(arr[6]),
      baseFeeMsat: _wire2api_i64(arr[7]),
      feeRate: _wire2api_f64(arr[8]),
      timeLockDelta: _wire2api_u32(arr[9]),
      minHtlcMsat: _wire2api_i64(arr[10]),
      channelFeePermyriad: _wire2api_i64(arr[11]),
      lspPubkey: _wire2api_uint_8_list(arr[12]),
      maxInactiveDuration: _wire2api_i64(arr[13]),
      channelMinimumFeeMsat: _wire2api_i64(arr[14]),
    );
  }

  MessageSuccessActionData _wire2api_message_success_action_data(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return MessageSuccessActionData(
      message: _wire2api_String(arr[0]),
    );
  }

  Network _wire2api_network(dynamic raw) {
    return Network.values[raw as int];
  }

  NodeState _wire2api_node_state(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 11) throw Exception('unexpected arr length: expect 11 but see ${arr.length}');
    return NodeState(
      id: _wire2api_String(arr[0]),
      blockHeight: _wire2api_u32(arr[1]),
      channelsBalanceMsat: _wire2api_u64(arr[2]),
      onchainBalanceMsat: _wire2api_u64(arr[3]),
      utxos: _wire2api_list_unspent_transaction_output(arr[4]),
      maxPayableMsat: _wire2api_u64(arr[5]),
      maxReceivableMsat: _wire2api_u64(arr[6]),
      maxSinglePaymentAmountMsat: _wire2api_u64(arr[7]),
      maxChanReserveMsats: _wire2api_u64(arr[8]),
      connectedPeers: _wire2api_StringList(arr[9]),
      inboundLiquidityMsats: _wire2api_u64(arr[10]),
    );
  }

  String? _wire2api_opt_String(dynamic raw) {
    return raw == null ? null : _wire2api_String(raw);
  }

  bool? _wire2api_opt_box_autoadd_bool(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_bool(raw);
  }

  LNInvoice? _wire2api_opt_box_autoadd_ln_invoice(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_ln_invoice(raw);
  }

  LspInformation? _wire2api_opt_box_autoadd_lsp_information(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_lsp_information(raw);
  }

  NodeState? _wire2api_opt_box_autoadd_node_state(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_node_state(raw);
  }

  SuccessActionProcessed? _wire2api_opt_box_autoadd_success_action_processed(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_success_action_processed(raw);
  }

  SwapInfo? _wire2api_opt_box_autoadd_swap_info(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_swap_info(raw);
  }

  Symbol? _wire2api_opt_box_autoadd_symbol(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_symbol(raw);
  }

  int? _wire2api_opt_box_autoadd_u32(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_u32(raw);
  }

  int? _wire2api_opt_box_autoadd_u64(dynamic raw) {
    return raw == null ? null : _wire2api_box_autoadd_u64(raw);
  }

  List<LocaleOverrides>? _wire2api_opt_list_locale_overrides(dynamic raw) {
    return raw == null ? null : _wire2api_list_locale_overrides(raw);
  }

  List<LocalizedName>? _wire2api_opt_list_localized_name(dynamic raw) {
    return raw == null ? null : _wire2api_list_localized_name(raw);
  }

  Payment _wire2api_payment(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 8) throw Exception('unexpected arr length: expect 8 but see ${arr.length}');
    return Payment(
      id: _wire2api_String(arr[0]),
      paymentType: _wire2api_payment_type(arr[1]),
      paymentTime: _wire2api_i64(arr[2]),
      amountMsat: _wire2api_u64(arr[3]),
      feeMsat: _wire2api_u64(arr[4]),
      pending: _wire2api_bool(arr[5]),
      description: _wire2api_opt_String(arr[6]),
      details: _wire2api_payment_details(arr[7]),
    );
  }

  PaymentDetails _wire2api_payment_details(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return PaymentDetails_Ln(
          data: _wire2api_box_autoadd_ln_payment_details(raw[1]),
        );
      case 1:
        return PaymentDetails_ClosedChannel(
          data: _wire2api_box_autoadd_closed_channel_payment_details(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  PaymentFailedData _wire2api_payment_failed_data(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3) throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return PaymentFailedData(
      error: _wire2api_String(arr[0]),
      nodeId: _wire2api_String(arr[1]),
      invoice: _wire2api_opt_box_autoadd_ln_invoice(arr[2]),
    );
  }

  PaymentType _wire2api_payment_type(dynamic raw) {
    return PaymentType.values[raw as int];
  }

  Rate _wire2api_rate(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return Rate(
      coin: _wire2api_String(arr[0]),
      value: _wire2api_f64(arr[1]),
    );
  }

  RecommendedFees _wire2api_recommended_fees(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 5) throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
    return RecommendedFees(
      fastestFee: _wire2api_u64(arr[0]),
      halfHourFee: _wire2api_u64(arr[1]),
      hourFee: _wire2api_u64(arr[2]),
      economyFee: _wire2api_u64(arr[3]),
      minimumFee: _wire2api_u64(arr[4]),
    );
  }

  ReverseSwapInfo _wire2api_reverse_swap_info(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4) throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return ReverseSwapInfo(
      id: _wire2api_String(arr[0]),
      claimPubkey: _wire2api_String(arr[1]),
      onchainAmountSat: _wire2api_u64(arr[2]),
      status: _wire2api_reverse_swap_status(arr[3]),
    );
  }

  ReverseSwapPairInfo _wire2api_reverse_swap_pair_info(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 6) throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return ReverseSwapPairInfo(
      min: _wire2api_u64(arr[0]),
      max: _wire2api_u64(arr[1]),
      feesHash: _wire2api_String(arr[2]),
      feesPercentage: _wire2api_f64(arr[3]),
      feesLockup: _wire2api_u64(arr[4]),
      feesClaim: _wire2api_u64(arr[5]),
    );
  }

  ReverseSwapStatus _wire2api_reverse_swap_status(dynamic raw) {
    return ReverseSwapStatus.values[raw as int];
  }

  RouteHint _wire2api_route_hint(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 1) throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return RouteHint(
      hops: _wire2api_list_route_hint_hop(arr[0]),
    );
  }

  RouteHintHop _wire2api_route_hint_hop(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 7) throw Exception('unexpected arr length: expect 7 but see ${arr.length}');
    return RouteHintHop(
      srcNodeId: _wire2api_String(arr[0]),
      shortChannelId: _wire2api_u64(arr[1]),
      feesBaseMsat: _wire2api_u32(arr[2]),
      feesProportionalMillionths: _wire2api_u32(arr[3]),
      cltvExpiryDelta: _wire2api_u64(arr[4]),
      htlcMinimumMsat: _wire2api_opt_box_autoadd_u64(arr[5]),
      htlcMaximumMsat: _wire2api_opt_box_autoadd_u64(arr[6]),
    );
  }

  SuccessActionProcessed _wire2api_success_action_processed(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return SuccessActionProcessed_Aes(
          data: _wire2api_box_autoadd_aes_success_action_data_decrypted(raw[1]),
        );
      case 1:
        return SuccessActionProcessed_Message(
          data: _wire2api_box_autoadd_message_success_action_data(raw[1]),
        );
      case 2:
        return SuccessActionProcessed_Url(
          data: _wire2api_box_autoadd_url_success_action_data(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  SwapInfo _wire2api_swap_info(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 20) throw Exception('unexpected arr length: expect 20 but see ${arr.length}');
    return SwapInfo(
      bitcoinAddress: _wire2api_String(arr[0]),
      createdAt: _wire2api_i64(arr[1]),
      lockHeight: _wire2api_i64(arr[2]),
      paymentHash: _wire2api_uint_8_list(arr[3]),
      preimage: _wire2api_uint_8_list(arr[4]),
      privateKey: _wire2api_uint_8_list(arr[5]),
      publicKey: _wire2api_uint_8_list(arr[6]),
      swapperPublicKey: _wire2api_uint_8_list(arr[7]),
      script: _wire2api_uint_8_list(arr[8]),
      bolt11: _wire2api_opt_String(arr[9]),
      paidSats: _wire2api_u64(arr[10]),
      confirmedSats: _wire2api_u64(arr[11]),
      unconfirmedSats: _wire2api_u64(arr[12]),
      status: _wire2api_swap_status(arr[13]),
      refundTxIds: _wire2api_StringList(arr[14]),
      unconfirmedTxIds: _wire2api_StringList(arr[15]),
      confirmedTxIds: _wire2api_StringList(arr[16]),
      minAllowedDeposit: _wire2api_i64(arr[17]),
      maxAllowedDeposit: _wire2api_i64(arr[18]),
      lastRedeemError: _wire2api_opt_String(arr[19]),
    );
  }

  SwapStatus _wire2api_swap_status(dynamic raw) {
    return SwapStatus.values[raw as int];
  }

  Symbol _wire2api_symbol(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 4) throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return Symbol(
      grapheme: _wire2api_opt_String(arr[0]),
      template: _wire2api_opt_String(arr[1]),
      rtl: _wire2api_opt_box_autoadd_bool(arr[2]),
      position: _wire2api_opt_box_autoadd_u32(arr[3]),
    );
  }

  int _wire2api_u16(dynamic raw) {
    return raw as int;
  }

  int _wire2api_u32(dynamic raw) {
    return raw as int;
  }

  int _wire2api_u64(dynamic raw) {
    return castInt(raw);
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }

  UnspentTransactionOutput _wire2api_unspent_transaction_output(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 6) throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
    return UnspentTransactionOutput(
      txid: _wire2api_uint_8_list(arr[0]),
      outnum: _wire2api_u32(arr[1]),
      amountMillisatoshi: _wire2api_u64(arr[2]),
      address: _wire2api_String(arr[3]),
      reserved: _wire2api_bool(arr[4]),
      reservedToBlock: _wire2api_u32(arr[5]),
    );
  }

  UrlSuccessActionData _wire2api_url_success_action_data(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 2) throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return UrlSuccessActionData(
      description: _wire2api_String(arr[0]),
      url: _wire2api_String(arr[1]),
    );
  }
}

// Section: api2wire

@protected
int api2wire_buy_bitcoin_provider(BuyBitcoinProvider raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_environment_type(EnvironmentType raw) {
  return api2wire_i32(raw.index);
}

@protected
double api2wire_f64(double raw) {
  return raw;
}

@protected
int api2wire_i32(int raw) {
  return raw;
}

@protected
int api2wire_network(Network raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_payment_type_filter(PaymentTypeFilter raw) {
  return api2wire_i32(raw.index);
}

@protected
int api2wire_u16(int raw) {
  return raw;
}

@protected
int api2wire_u32(int raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

// Section: finalizer

class BreezSdkCorePlatform extends FlutterRustBridgeBase<BreezSdkCoreWire> {
  BreezSdkCorePlatform(ffi.DynamicLibrary dylib) : super(BreezSdkCoreWire(dylib));

// Section: api2wire

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_Config> api2wire_box_autoadd_config(Config raw) {
    final ptr = inner.new_box_autoadd_config_0();
    _api_fill_to_wire_config(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_GreenlightCredentials> api2wire_box_autoadd_greenlight_credentials(
      GreenlightCredentials raw) {
    final ptr = inner.new_box_autoadd_greenlight_credentials_0();
    _api_fill_to_wire_greenlight_credentials(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<ffi.Int64> api2wire_box_autoadd_i64(int raw) {
    return inner.new_box_autoadd_i64_0(api2wire_i64(raw));
  }

  @protected
  ffi.Pointer<wire_LnUrlAuthRequestData> api2wire_box_autoadd_ln_url_auth_request_data(
      LnUrlAuthRequestData raw) {
    final ptr = inner.new_box_autoadd_ln_url_auth_request_data_0();
    _api_fill_to_wire_ln_url_auth_request_data(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_LnUrlPayRequestData> api2wire_box_autoadd_ln_url_pay_request_data(
      LnUrlPayRequestData raw) {
    final ptr = inner.new_box_autoadd_ln_url_pay_request_data_0();
    _api_fill_to_wire_ln_url_pay_request_data(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_LnUrlWithdrawRequestData> api2wire_box_autoadd_ln_url_withdraw_request_data(
      LnUrlWithdrawRequestData raw) {
    final ptr = inner.new_box_autoadd_ln_url_withdraw_request_data_0();
    _api_fill_to_wire_ln_url_withdraw_request_data(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<ffi.Uint64> api2wire_box_autoadd_u64(int raw) {
    return inner.new_box_autoadd_u64_0(api2wire_u64(raw));
  }

  @protected
  int api2wire_i64(int raw) {
    return raw;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_opt_String(String? raw) {
    return raw == null ? ffi.nullptr : api2wire_String(raw);
  }

  @protected
  ffi.Pointer<wire_GreenlightCredentials> api2wire_opt_box_autoadd_greenlight_credentials(
      GreenlightCredentials? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_greenlight_credentials(raw);
  }

  @protected
  ffi.Pointer<ffi.Int64> api2wire_opt_box_autoadd_i64(int? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_i64(raw);
  }

  @protected
  ffi.Pointer<ffi.Uint64> api2wire_opt_box_autoadd_u64(int? raw) {
    return raw == null ? ffi.nullptr : api2wire_box_autoadd_u64(raw);
  }

  @protected
  int api2wire_u64(int raw) {
    return raw;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }
// Section: finalizer

// Section: api_fill_to_wire

  void _api_fill_to_wire_box_autoadd_config(Config apiObj, ffi.Pointer<wire_Config> wireObj) {
    _api_fill_to_wire_config(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_greenlight_credentials(
      GreenlightCredentials apiObj, ffi.Pointer<wire_GreenlightCredentials> wireObj) {
    _api_fill_to_wire_greenlight_credentials(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_ln_url_auth_request_data(
      LnUrlAuthRequestData apiObj, ffi.Pointer<wire_LnUrlAuthRequestData> wireObj) {
    _api_fill_to_wire_ln_url_auth_request_data(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_ln_url_pay_request_data(
      LnUrlPayRequestData apiObj, ffi.Pointer<wire_LnUrlPayRequestData> wireObj) {
    _api_fill_to_wire_ln_url_pay_request_data(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_ln_url_withdraw_request_data(
      LnUrlWithdrawRequestData apiObj, ffi.Pointer<wire_LnUrlWithdrawRequestData> wireObj) {
    _api_fill_to_wire_ln_url_withdraw_request_data(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_config(Config apiObj, wire_Config wireObj) {
    wireObj.breezserver = api2wire_String(apiObj.breezserver);
    wireObj.mempoolspace_url = api2wire_String(apiObj.mempoolspaceUrl);
    wireObj.working_dir = api2wire_String(apiObj.workingDir);
    wireObj.network = api2wire_network(apiObj.network);
    wireObj.payment_timeout_sec = api2wire_u32(apiObj.paymentTimeoutSec);
    wireObj.default_lsp_id = api2wire_opt_String(apiObj.defaultLspId);
    wireObj.api_key = api2wire_opt_String(apiObj.apiKey);
    wireObj.maxfee_percent = api2wire_f64(apiObj.maxfeePercent);
  }

  void _api_fill_to_wire_greenlight_credentials(
      GreenlightCredentials apiObj, wire_GreenlightCredentials wireObj) {
    wireObj.device_key = api2wire_uint_8_list(apiObj.deviceKey);
    wireObj.device_cert = api2wire_uint_8_list(apiObj.deviceCert);
  }

  void _api_fill_to_wire_ln_url_auth_request_data(
      LnUrlAuthRequestData apiObj, wire_LnUrlAuthRequestData wireObj) {
    wireObj.k1 = api2wire_String(apiObj.k1);
    wireObj.action = api2wire_opt_String(apiObj.action);
    wireObj.domain = api2wire_String(apiObj.domain);
    wireObj.url = api2wire_String(apiObj.url);
  }

  void _api_fill_to_wire_ln_url_pay_request_data(
      LnUrlPayRequestData apiObj, wire_LnUrlPayRequestData wireObj) {
    wireObj.callback = api2wire_String(apiObj.callback);
    wireObj.min_sendable = api2wire_u64(apiObj.minSendable);
    wireObj.max_sendable = api2wire_u64(apiObj.maxSendable);
    wireObj.metadata_str = api2wire_String(apiObj.metadataStr);
    wireObj.comment_allowed = api2wire_u16(apiObj.commentAllowed);
    wireObj.domain = api2wire_String(apiObj.domain);
    wireObj.ln_address = api2wire_opt_String(apiObj.lnAddress);
  }

  void _api_fill_to_wire_ln_url_withdraw_request_data(
      LnUrlWithdrawRequestData apiObj, wire_LnUrlWithdrawRequestData wireObj) {
    wireObj.callback = api2wire_String(apiObj.callback);
    wireObj.k1 = api2wire_String(apiObj.k1);
    wireObj.default_description = api2wire_String(apiObj.defaultDescription);
    wireObj.min_withdrawable = api2wire_u64(apiObj.minWithdrawable);
    wireObj.max_withdrawable = api2wire_u64(apiObj.maxWithdrawable);
  }

  void _api_fill_to_wire_opt_box_autoadd_greenlight_credentials(
      GreenlightCredentials? apiObj, ffi.Pointer<wire_GreenlightCredentials> wireObj) {
    if (apiObj != null) _api_fill_to_wire_box_autoadd_greenlight_credentials(apiObj, wireObj);
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class BreezSdkCoreWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  BreezSdkCoreWire(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  BreezSdkCoreWire.fromLookup(ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>('store_dart_post_cobject');
  late final _store_dart_post_cobject =
      _store_dart_post_cobjectPtr.asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>('get_dart_object');
  late final _get_dart_object = _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>('drop_dart_object');
  late final _drop_dart_object = _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr =
      _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>('new_dart_opaque');
  late final _new_dart_opaque = _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr =
      _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>('init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl =
      _init_frb_dart_api_dlPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_initialized(
    int port_,
  ) {
    return _wire_initialized(
      port_,
    );
  }

  late final _wire_initializedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_initialized');
  late final _wire_initialized = _wire_initializedPtr.asFunction<void Function(int)>();

  void wire_register_node(
    int port_,
    int network,
    ffi.Pointer<wire_uint_8_list> seed,
    ffi.Pointer<wire_Config> config,
    ffi.Pointer<wire_GreenlightCredentials> register_credentials,
    ffi.Pointer<wire_uint_8_list> invite_code,
  ) {
    return _wire_register_node(
      port_,
      network,
      seed,
      config,
      register_credentials,
      invite_code,
    );
  }

  late final _wire_register_nodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Int32, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_Config>,
              ffi.Pointer<wire_GreenlightCredentials>, ffi.Pointer<wire_uint_8_list>)>>('wire_register_node');
  late final _wire_register_node = _wire_register_nodePtr.asFunction<
      void Function(int, int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_Config>,
          ffi.Pointer<wire_GreenlightCredentials>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_recover_node(
    int port_,
    int network,
    ffi.Pointer<wire_uint_8_list> seed,
    ffi.Pointer<wire_Config> config,
  ) {
    return _wire_recover_node(
      port_,
      network,
      seed,
      config,
    );
  }

  late final _wire_recover_nodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Int32, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_Config>)>>('wire_recover_node');
  late final _wire_recover_node = _wire_recover_nodePtr
      .asFunction<void Function(int, int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_Config>)>();

  void wire_init_services(
    int port_,
    ffi.Pointer<wire_Config> config,
    ffi.Pointer<wire_uint_8_list> seed,
    ffi.Pointer<wire_GreenlightCredentials> creds,
  ) {
    return _wire_init_services(
      port_,
      config,
      seed,
      creds,
    );
  }

  late final _wire_init_servicesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_Config>, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_GreenlightCredentials>)>>('wire_init_services');
  late final _wire_init_services = _wire_init_servicesPtr.asFunction<
      void Function(int, ffi.Pointer<wire_Config>, ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_GreenlightCredentials>)>();

  void wire_start_node(
    int port_,
  ) {
    return _wire_start_node(
      port_,
    );
  }

  late final _wire_start_nodePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_start_node');
  late final _wire_start_node = _wire_start_nodePtr.asFunction<void Function(int)>();

  void wire_breez_events_stream(
    int port_,
  ) {
    return _wire_breez_events_stream(
      port_,
    );
  }

  late final _wire_breez_events_streamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_breez_events_stream');
  late final _wire_breez_events_stream = _wire_breez_events_streamPtr.asFunction<void Function(int)>();

  void wire_breez_log_stream(
    int port_,
  ) {
    return _wire_breez_log_stream(
      port_,
    );
  }

  late final _wire_breez_log_streamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_breez_log_stream');
  late final _wire_breez_log_stream = _wire_breez_log_streamPtr.asFunction<void Function(int)>();

  void wire_stop_node(
    int port_,
  ) {
    return _wire_stop_node(
      port_,
    );
  }

  late final _wire_stop_nodePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_stop_node');
  late final _wire_stop_node = _wire_stop_nodePtr.asFunction<void Function(int)>();

  void wire_send_payment(
    int port_,
    ffi.Pointer<wire_uint_8_list> bolt11,
    ffi.Pointer<ffi.Uint64> amount_sats,
  ) {
    return _wire_send_payment(
      port_,
      bolt11,
      amount_sats,
    );
  }

  late final _wire_send_paymentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<ffi.Uint64>)>>('wire_send_payment');
  late final _wire_send_payment = _wire_send_paymentPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<ffi.Uint64>)>();

  void wire_send_spontaneous_payment(
    int port_,
    ffi.Pointer<wire_uint_8_list> node_id,
    int amount_sats,
  ) {
    return _wire_send_spontaneous_payment(
      port_,
      node_id,
      amount_sats,
    );
  }

  late final _wire_send_spontaneous_paymentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>, ffi.Uint64)>>(
          'wire_send_spontaneous_payment');
  late final _wire_send_spontaneous_payment =
      _wire_send_spontaneous_paymentPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, int)>();

  void wire_receive_payment(
    int port_,
    int amount_sats,
    ffi.Pointer<wire_uint_8_list> description,
  ) {
    return _wire_receive_payment(
      port_,
      amount_sats,
      description,
    );
  }

  late final _wire_receive_paymentPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Uint64, ffi.Pointer<wire_uint_8_list>)>>(
          'wire_receive_payment');
  late final _wire_receive_payment =
      _wire_receive_paymentPtr.asFunction<void Function(int, int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_node_info(
    int port_,
  ) {
    return _wire_node_info(
      port_,
    );
  }

  late final _wire_node_infoPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_node_info');
  late final _wire_node_info = _wire_node_infoPtr.asFunction<void Function(int)>();

  void wire_list_payments(
    int port_,
    int filter,
    ffi.Pointer<ffi.Int64> from_timestamp,
    ffi.Pointer<ffi.Int64> to_timestamp,
  ) {
    return _wire_list_payments(
      port_,
      filter,
      from_timestamp,
      to_timestamp,
    );
  }

  late final _wire_list_paymentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Int32, ffi.Pointer<ffi.Int64>, ffi.Pointer<ffi.Int64>)>>('wire_list_payments');
  late final _wire_list_payments = _wire_list_paymentsPtr
      .asFunction<void Function(int, int, ffi.Pointer<ffi.Int64>, ffi.Pointer<ffi.Int64>)>();

  void wire_list_lsps(
    int port_,
  ) {
    return _wire_list_lsps(
      port_,
    );
  }

  late final _wire_list_lspsPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_list_lsps');
  late final _wire_list_lsps = _wire_list_lspsPtr.asFunction<void Function(int)>();

  void wire_connect_lsp(
    int port_,
    ffi.Pointer<wire_uint_8_list> lsp_id,
  ) {
    return _wire_connect_lsp(
      port_,
      lsp_id,
    );
  }

  late final _wire_connect_lspPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
          'wire_connect_lsp');
  late final _wire_connect_lsp =
      _wire_connect_lspPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_fetch_lsp_info(
    int port_,
    ffi.Pointer<wire_uint_8_list> id,
  ) {
    return _wire_fetch_lsp_info(
      port_,
      id,
    );
  }

  late final _wire_fetch_lsp_infoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
          'wire_fetch_lsp_info');
  late final _wire_fetch_lsp_info =
      _wire_fetch_lsp_infoPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_lsp_id(
    int port_,
  ) {
    return _wire_lsp_id(
      port_,
    );
  }

  late final _wire_lsp_idPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_lsp_id');
  late final _wire_lsp_id = _wire_lsp_idPtr.asFunction<void Function(int)>();

  void wire_fetch_fiat_rates(
    int port_,
  ) {
    return _wire_fetch_fiat_rates(
      port_,
    );
  }

  late final _wire_fetch_fiat_ratesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_fetch_fiat_rates');
  late final _wire_fetch_fiat_rates = _wire_fetch_fiat_ratesPtr.asFunction<void Function(int)>();

  void wire_list_fiat_currencies(
    int port_,
  ) {
    return _wire_list_fiat_currencies(
      port_,
    );
  }

  late final _wire_list_fiat_currenciesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_list_fiat_currencies');
  late final _wire_list_fiat_currencies = _wire_list_fiat_currenciesPtr.asFunction<void Function(int)>();

  void wire_close_lsp_channels(
    int port_,
  ) {
    return _wire_close_lsp_channels(
      port_,
    );
  }

  late final _wire_close_lsp_channelsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_close_lsp_channels');
  late final _wire_close_lsp_channels = _wire_close_lsp_channelsPtr.asFunction<void Function(int)>();

  void wire_sweep(
    int port_,
    ffi.Pointer<wire_uint_8_list> to_address,
    int fee_rate_sats_per_vbyte,
  ) {
    return _wire_sweep(
      port_,
      to_address,
      fee_rate_sats_per_vbyte,
    );
  }

  late final _wire_sweepPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>, ffi.Uint64)>>(
          'wire_sweep');
  late final _wire_sweep =
      _wire_sweepPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, int)>();

  void wire_receive_onchain(
    int port_,
  ) {
    return _wire_receive_onchain(
      port_,
    );
  }

  late final _wire_receive_onchainPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_receive_onchain');
  late final _wire_receive_onchain = _wire_receive_onchainPtr.asFunction<void Function(int)>();

  void wire_in_progress_swap(
    int port_,
  ) {
    return _wire_in_progress_swap(
      port_,
    );
  }

  late final _wire_in_progress_swapPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_in_progress_swap');
  late final _wire_in_progress_swap = _wire_in_progress_swapPtr.asFunction<void Function(int)>();

  void wire_list_refundables(
    int port_,
  ) {
    return _wire_list_refundables(
      port_,
    );
  }

  late final _wire_list_refundablesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_list_refundables');
  late final _wire_list_refundables = _wire_list_refundablesPtr.asFunction<void Function(int)>();

  void wire_refund(
    int port_,
    ffi.Pointer<wire_uint_8_list> swap_address,
    ffi.Pointer<wire_uint_8_list> to_address,
    int sat_per_vbyte,
  ) {
    return _wire_refund(
      port_,
      swap_address,
      to_address,
      sat_per_vbyte,
    );
  }

  late final _wire_refundPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>,
              ffi.Uint32)>>('wire_refund');
  late final _wire_refund = _wire_refundPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>, int)>();

  void wire_fetch_reverse_swap_fees(
    int port_,
  ) {
    return _wire_fetch_reverse_swap_fees(
      port_,
    );
  }

  late final _wire_fetch_reverse_swap_feesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_fetch_reverse_swap_fees');
  late final _wire_fetch_reverse_swap_fees =
      _wire_fetch_reverse_swap_feesPtr.asFunction<void Function(int)>();

  void wire_in_progress_reverse_swaps(
    int port_,
  ) {
    return _wire_in_progress_reverse_swaps(
      port_,
    );
  }

  late final _wire_in_progress_reverse_swapsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_in_progress_reverse_swaps');
  late final _wire_in_progress_reverse_swaps =
      _wire_in_progress_reverse_swapsPtr.asFunction<void Function(int)>();

  void wire_send_onchain(
    int port_,
    int amount_sat,
    ffi.Pointer<wire_uint_8_list> onchain_recipient_address,
    ffi.Pointer<wire_uint_8_list> pair_hash,
    int sat_per_vbyte,
  ) {
    return _wire_send_onchain(
      port_,
      amount_sat,
      onchain_recipient_address,
      pair_hash,
      sat_per_vbyte,
    );
  }

  late final _wire_send_onchainPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Uint64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>, ffi.Uint64)>>('wire_send_onchain');
  late final _wire_send_onchain = _wire_send_onchainPtr.asFunction<
      void Function(int, int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>, int)>();

  void wire_execute_command(
    int port_,
    ffi.Pointer<wire_uint_8_list> command,
  ) {
    return _wire_execute_command(
      port_,
      command,
    );
  }

  late final _wire_execute_commandPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
          'wire_execute_command');
  late final _wire_execute_command =
      _wire_execute_commandPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_sync_node(
    int port_,
  ) {
    return _wire_sync_node(
      port_,
    );
  }

  late final _wire_sync_nodePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_sync_node');
  late final _wire_sync_node = _wire_sync_nodePtr.asFunction<void Function(int)>();

  void wire_parse_invoice(
    int port_,
    ffi.Pointer<wire_uint_8_list> invoice,
  ) {
    return _wire_parse_invoice(
      port_,
      invoice,
    );
  }

  late final _wire_parse_invoicePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
          'wire_parse_invoice');
  late final _wire_parse_invoice =
      _wire_parse_invoicePtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_parse(
    int port_,
    ffi.Pointer<wire_uint_8_list> s,
  ) {
    return _wire_parse(
      port_,
      s,
    );
  }

  late final _wire_parsePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_parse');
  late final _wire_parse = _wire_parsePtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_lnurl_pay(
    int port_,
    int user_amount_sat,
    ffi.Pointer<wire_uint_8_list> comment,
    ffi.Pointer<wire_LnUrlPayRequestData> req_data,
  ) {
    return _wire_lnurl_pay(
      port_,
      user_amount_sat,
      comment,
      req_data,
    );
  }

  late final _wire_lnurl_payPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Uint64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_LnUrlPayRequestData>)>>('wire_lnurl_pay');
  late final _wire_lnurl_pay = _wire_lnurl_payPtr.asFunction<
      void Function(int, int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_LnUrlPayRequestData>)>();

  void wire_lnurl_withdraw(
    int port_,
    ffi.Pointer<wire_LnUrlWithdrawRequestData> req_data,
    int amount_sats,
    ffi.Pointer<wire_uint_8_list> description,
  ) {
    return _wire_lnurl_withdraw(
      port_,
      req_data,
      amount_sats,
      description,
    );
  }

  late final _wire_lnurl_withdrawPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_LnUrlWithdrawRequestData>, ffi.Uint64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_lnurl_withdraw');
  late final _wire_lnurl_withdraw = _wire_lnurl_withdrawPtr.asFunction<
      void Function(int, ffi.Pointer<wire_LnUrlWithdrawRequestData>, int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_lnurl_auth(
    int port_,
    ffi.Pointer<wire_LnUrlAuthRequestData> req_data,
  ) {
    return _wire_lnurl_auth(
      port_,
      req_data,
    );
  }

  late final _wire_lnurl_authPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_LnUrlAuthRequestData>)>>(
          'wire_lnurl_auth');
  late final _wire_lnurl_auth =
      _wire_lnurl_authPtr.asFunction<void Function(int, ffi.Pointer<wire_LnUrlAuthRequestData>)>();

  void wire_mnemonic_to_seed(
    int port_,
    ffi.Pointer<wire_uint_8_list> phrase,
  ) {
    return _wire_mnemonic_to_seed(
      port_,
      phrase,
    );
  }

  late final _wire_mnemonic_to_seedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
          'wire_mnemonic_to_seed');
  late final _wire_mnemonic_to_seed =
      _wire_mnemonic_to_seedPtr.asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_recommended_fees(
    int port_,
  ) {
    return _wire_recommended_fees(
      port_,
    );
  }

  late final _wire_recommended_feesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_recommended_fees');
  late final _wire_recommended_fees = _wire_recommended_feesPtr.asFunction<void Function(int)>();

  void wire_default_config(
    int port_,
    int config_type,
  ) {
    return _wire_default_config(
      port_,
      config_type,
    );
  }

  late final _wire_default_configPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32)>>('wire_default_config');
  late final _wire_default_config = _wire_default_configPtr.asFunction<void Function(int, int)>();

  void wire_buy_bitcoin(
    int port_,
    int provider,
  ) {
    return _wire_buy_bitcoin(
      port_,
      provider,
    );
  }

  late final _wire_buy_bitcoinPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32)>>('wire_buy_bitcoin');
  late final _wire_buy_bitcoin = _wire_buy_bitcoinPtr.asFunction<void Function(int, int)>();

  ffi.Pointer<wire_Config> new_box_autoadd_config_0() {
    return _new_box_autoadd_config_0();
  }

  late final _new_box_autoadd_config_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_Config> Function()>>('new_box_autoadd_config_0');
  late final _new_box_autoadd_config_0 =
      _new_box_autoadd_config_0Ptr.asFunction<ffi.Pointer<wire_Config> Function()>();

  ffi.Pointer<wire_GreenlightCredentials> new_box_autoadd_greenlight_credentials_0() {
    return _new_box_autoadd_greenlight_credentials_0();
  }

  late final _new_box_autoadd_greenlight_credentials_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_GreenlightCredentials> Function()>>(
          'new_box_autoadd_greenlight_credentials_0');
  late final _new_box_autoadd_greenlight_credentials_0 = _new_box_autoadd_greenlight_credentials_0Ptr
      .asFunction<ffi.Pointer<wire_GreenlightCredentials> Function()>();

  ffi.Pointer<ffi.Int64> new_box_autoadd_i64_0(
    int value,
  ) {
    return _new_box_autoadd_i64_0(
      value,
    );
  }

  late final _new_box_autoadd_i64_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int64> Function(ffi.Int64)>>('new_box_autoadd_i64_0');
  late final _new_box_autoadd_i64_0 =
      _new_box_autoadd_i64_0Ptr.asFunction<ffi.Pointer<ffi.Int64> Function(int)>();

  ffi.Pointer<wire_LnUrlAuthRequestData> new_box_autoadd_ln_url_auth_request_data_0() {
    return _new_box_autoadd_ln_url_auth_request_data_0();
  }

  late final _new_box_autoadd_ln_url_auth_request_data_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_LnUrlAuthRequestData> Function()>>(
          'new_box_autoadd_ln_url_auth_request_data_0');
  late final _new_box_autoadd_ln_url_auth_request_data_0 = _new_box_autoadd_ln_url_auth_request_data_0Ptr
      .asFunction<ffi.Pointer<wire_LnUrlAuthRequestData> Function()>();

  ffi.Pointer<wire_LnUrlPayRequestData> new_box_autoadd_ln_url_pay_request_data_0() {
    return _new_box_autoadd_ln_url_pay_request_data_0();
  }

  late final _new_box_autoadd_ln_url_pay_request_data_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_LnUrlPayRequestData> Function()>>(
          'new_box_autoadd_ln_url_pay_request_data_0');
  late final _new_box_autoadd_ln_url_pay_request_data_0 = _new_box_autoadd_ln_url_pay_request_data_0Ptr
      .asFunction<ffi.Pointer<wire_LnUrlPayRequestData> Function()>();

  ffi.Pointer<wire_LnUrlWithdrawRequestData> new_box_autoadd_ln_url_withdraw_request_data_0() {
    return _new_box_autoadd_ln_url_withdraw_request_data_0();
  }

  late final _new_box_autoadd_ln_url_withdraw_request_data_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_LnUrlWithdrawRequestData> Function()>>(
          'new_box_autoadd_ln_url_withdraw_request_data_0');
  late final _new_box_autoadd_ln_url_withdraw_request_data_0 =
      _new_box_autoadd_ln_url_withdraw_request_data_0Ptr
          .asFunction<ffi.Pointer<wire_LnUrlWithdrawRequestData> Function()>();

  ffi.Pointer<ffi.Uint64> new_box_autoadd_u64_0(
    int value,
  ) {
    return _new_box_autoadd_u64_0(
      value,
    );
  }

  late final _new_box_autoadd_u64_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint64> Function(ffi.Uint64)>>('new_box_autoadd_u64_0');
  late final _new_box_autoadd_u64_0 =
      _new_box_autoadd_u64_0Ptr.asFunction<ffi.Pointer<ffi.Uint64> Function(int)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_uint_8_list> Function(ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 =
      _new_uint_8_list_0Ptr.asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>('free_WireSyncReturn');
  late final _free_WireSyncReturn = _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

class _Dart_Handle extends ffi.Opaque {}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

class wire_Config extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> breezserver;

  external ffi.Pointer<wire_uint_8_list> mempoolspace_url;

  external ffi.Pointer<wire_uint_8_list> working_dir;

  @ffi.Int32()
  external int network;

  @ffi.Uint32()
  external int payment_timeout_sec;

  external ffi.Pointer<wire_uint_8_list> default_lsp_id;

  external ffi.Pointer<wire_uint_8_list> api_key;

  @ffi.Double()
  external double maxfee_percent;
}

class wire_GreenlightCredentials extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> device_key;

  external ffi.Pointer<wire_uint_8_list> device_cert;
}

class wire_LnUrlPayRequestData extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> callback;

  @ffi.Uint64()
  external int min_sendable;

  @ffi.Uint64()
  external int max_sendable;

  external ffi.Pointer<wire_uint_8_list> metadata_str;

  @ffi.Uint16()
  external int comment_allowed;

  external ffi.Pointer<wire_uint_8_list> domain;

  external ffi.Pointer<wire_uint_8_list> ln_address;
}

class wire_LnUrlWithdrawRequestData extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> callback;

  external ffi.Pointer<wire_uint_8_list> k1;

  external ffi.Pointer<wire_uint_8_list> default_description;

  @ffi.Uint64()
  external int min_withdrawable;

  @ffi.Uint64()
  external int max_withdrawable;
}

class wire_LnUrlAuthRequestData extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> k1;

  external ffi.Pointer<wire_uint_8_list> action;

  external ffi.Pointer<wire_uint_8_list> domain;

  external ffi.Pointer<wire_uint_8_list> url;
}

typedef DartPostCObjectFnType
    = ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(DartPort port_id, ffi.Pointer<ffi.Void> message)>>;
typedef DartPort = ffi.Int64;
